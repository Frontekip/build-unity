#!/usr/bin/env node

/*
 * Manual Command Lines
 * XXX: https://docs.unity3d.com/Manual/CommandLineArguments.html
 */


const arg = require('arg');
const exec = require('child_process').exec;
const ora = require('ora');
const path = require('path');

const ARGS_OPTIONS = {
    permissive: true
};

const args = arg({
    '--build': String,
    '--version': String,

    // Aliases
    '--help': Boolean,
}, ARGS_OPTIONS);

function runCmd(platform, cmd) {
    const spinner = ora(`Building ${platform}`).start();

    exec(cmd, (error, stdout, stderr) => {

        // Spinner Stop
        spinner.stop();

        // fail or successed
        error ? spinner.fail("Building ERROR") : spinner.succeed("Build SUCCESS");

        // show logs
        console.log(stdout);
        console.log(stderr);

        // exit
        process.exit(0);
    });
}

// Make sure commands gracefully respect termination signals (e.g. from Docker)
process.on('SIGTERM', () => process.exit(0));
process.on('SIGINT', () => process.exit(0));


if (args['--help']) {
    console.log(`
      Usage
        $ unity <command>
      Options
        --version, -v   Version number
        --help, -h      Displays this message
      For more information run a command with the --help flag
        $ unity --help
    `);
}


(() => {
    const unityVersion = args["--version"];
    const os = args["--build"];

    const projectPath = path.resolve('.');
    const projectBuildPath = `${projectPath}/.builds`
    const unityPath = `/Applications/Unity/Hub/Editor/${unityVersion}/Unity.app/Contents/MacOS/Unity`;

    const BUILDS = {
        macos() {
            runCmd('MACOS', `${unityPath} -quit -batchmode -logFile stdout.log -projectPath ${projectPath} -buildOSXUniversalPlayer ${projectBuildPath}/macos/game`);
        },

        windows() {
            runCmd('WINDOWS', `${unityPath} -quit -batchmode -logFile stdout.log -projectPath ${projectPath} -buildWindows64Player ${projectBuildPath}/windows/game`);
        }
    };

    if (!os) {

        return console.log(`
Please use 

    --build=windows|macos
        `);
    }


    if (!unityVersion) {
        return console.log(`
Please use:

    --version=<unity-version>
        `);
    }

    // run build
    return BUILDS[os]();
})();

